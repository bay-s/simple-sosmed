  
handlerChange = (e) => {
  const {name,value} = e.target
  this.setState(prev => {
    return{
 [name]:value
    }
  })

}

commentNotif = (ranID) => {
  const notif_id =  this.state.comment_user_id

  const docUpdate = doc(database,'notifikasi',notif_id ) // ADD NOTIF

  updateDoc(docUpdate,{
              notif:arrayUnion({
                  pesan:`${this.props.user_name} Telah membalas komentar anda`,
                  user_name:this.props.user_name,
                  user_id:this.props.user_id,
                  user_avatar:this.props.avatar,
                  post_id:this.props.post_id,
                })
        })
  .then(() => {console.log("notif me senpai")})
  .catch((err) => {console.log(err)}); 

}

commentReply = e => {
    e.preventDefault()
    const ranID = (Math.random() + 1).toString(36).substring(1);
    const docUpdate = doc(database,'comment',this.state.comment_id)

if(this.state.commentTxt.length < 3 ){
  alert("COMMENT ATLEAST 3 CHARACTER")
}else{
  this.setState({
    submit:this.state.submit = false
  })

updateDoc(docUpdate,{
  reply:arrayUnion({
  reply_id:ranID,
  reply_to:`${this.props.user_name} Has replied to a comment from ${this.state.comment_owner}`,
  reply_author_name:this.props.user_name,
  reply_author_avatar:this.props.avatar,
  reply_author_id:this.props.user_id,
  reply_text:this.state.commentTxt,
  comment_id:this.state.comment_id
})
})
.then(() => {
  alert("reply sukses")
  this.setState({
    view:this.state.view = false,
    open:this.state.open = false,
    submit:this.state.submit = true
  })
  // this.commentNotif()
  e.target.reset()
})
.catch((err) => {
  console.log(err)
  this.setState({
    submit:this.state.submit = true
  })
}
); 
}
}  

openReplyComment = (e) => {
  e.preventDefault()
  const replyContainer = e.target.parentElement.previousElementSibling.parentElement.firstChild.nextElementSibling.nextElementSibling.nextElementSibling
  const com_id = e.target.dataset.comment_id
  const targets = e.target.parentElement.previousSibling.previousSibling.firstChild.nextSibling.textContent;
  const target_id = e.target.parentElement.previousSibling.previousSibling.firstChild.nextSibling.dataset.com_id


  replyContainer.classList.toggle('hide')
  this.setState({
    comment_id:this.state.comment_id = com_id,
    comment_owner:this.state.comment_owner = targets,
    comment_user_id:this.state.comment_user_id = target_id,
  })

 if(e.target.classList.contains('reply')){
this.setState({open:this.state.open = true})
 }
else{
  this.setState({open:this.state.open = false})
 }
}


viewReply = (e) => {
  e.preventDefault()
  const com_id = e.target.dataset.comment_id
  const viewContainer = e.target.parentElement.previousElementSibling.parentElement.firstChild.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling

this.setState({comment_reply_id:this.state.comment_reply_id = com_id})
viewContainer.classList.toggle('hide')

}

openReply = (e) => {
  e.preventDefault()
  const com_id = e.target.dataset.comment_id
  const targets = e.target.parentElement.previousSibling.previousSibling.firstChild.nextSibling.textContent;
  const target_id = e.target.parentElement.previousSibling.previousSibling.firstChild.nextSibling.dataset.com_id
  console.log(com_id);
  this.setState({
    comment_id:this.state.comment_id = com_id,
    comment_owner:this.state.comment_owner = targets
  })
 if(e.target.classList.contains('reply')){
this.setState({openReply:this.state.openReply = true})
 }
else{
  this.setState({open:this.state.openReply = false})
 }
}

